/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    pages: Page;
    knowledgebase: Knowledgebase;
    media: Media;
    groups: Group;
    users: User;
    badge: Badge;
    events: Event;
    'notification-settings': NotificationSetting;
    newsletter: Newsletter;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    users: {
      notificationSettings: 'notification-settings';
    };
  };
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    knowledgebase: KnowledgebaseSelect<false> | KnowledgebaseSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    groups: GroupsSelect<false> | GroupsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    badge: BadgeSelect<false> | BadgeSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    'notification-settings': NotificationSettingsSelect<false> | NotificationSettingsSelect<true>;
    newsletter: NewsletterSelect<false> | NewsletterSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  layout: {
    color: 'green' | 'white-1' | 'white-2';
    layout: (
      | {
          title: string;
          id?: string | null;
          blockName?: string | null;
          blockType: 'h1Block';
        }
      | {
          title: string;
          id?: string | null;
          blockName?: string | null;
          blockType: 'h2Block';
        }
      | {
          title: string;
          richText: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
          blockName?: string | null;
          blockType: 'heroBlock';
        }
      | MediaBlock
      | LoginBlock
      | SignupBlock
      | {
          sections: {
            subtitle: string;
            listItem?:
              | {
                  title: string;
                  description: string;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
          }[];
          id?: string | null;
          blockName?: string | null;
          blockType: 'manifestBlock';
        }
      | {
          layout: (
            | {
                title: string;
                id?: string | null;
                blockName?: string | null;
                blockType: 'h1Block';
              }
            | {
                title: string;
                id?: string | null;
                blockName?: string | null;
                blockType: 'h2Block';
              }
            | {
                title: string;
                richText: {
                  root: {
                    type: string;
                    children: {
                      type: string;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                };
                id?: string | null;
                blockName?: string | null;
                blockType: 'heroBlock';
              }
            | MediaBlock
            | LoginBlock
            | SignupBlock
            | {
                sections: {
                  subtitle: string;
                  listItem?:
                    | {
                        title: string;
                        description: string;
                        id?: string | null;
                      }[]
                    | null;
                  id?: string | null;
                }[];
                id?: string | null;
                blockName?: string | null;
                blockType: 'manifestBlock';
              }
            | {
                link: {
                  type?: ('reference' | 'custom') | null;
                  newTab?: boolean | null;
                  reference?:
                    | ({
                        relationTo: 'pages';
                        value: number | Page;
                      } | null)
                    | ({
                        relationTo: 'knowledgebase';
                        value: number | Knowledgebase;
                      } | null);
                  url?: string | null;
                  label: string;
                };
                hasLeftIcon: boolean;
                iconLeft?: string | null;
                hasRightIcon: boolean;
                iconRight?: string | null;
                variant: 'green' | 'orange' | 'black';
                size: 'small' | 'large';
                id?: string | null;
                blockName?: string | null;
                blockType: 'buttonBlock';
              }
            | {
                richText: {
                  root: {
                    type: string;
                    children: {
                      type: string;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                };
                id?: string | null;
                blockName?: string | null;
                blockType: 'emphasizedParagraph';
              }
            | {
                title?: string | null;
                richText: {
                  root: {
                    type: string;
                    children: {
                      type: string;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                };
                id?: string | null;
                blockName?: string | null;
                blockType: 'largeRichTextBlock';
              }
            | {
                title: string;
                events?: (number | null) | Event;
                id?: string | null;
                blockName?: string | null;
                blockType: 'upcomingEvents';
              }
            | AccountBlock
          )[];
          id?: string | null;
          blockName?: string | null;
          blockType: 'indentedContainer';
        }
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'knowledgebase';
                  value: number | Knowledgebase;
                } | null);
            url?: string | null;
            label: string;
          };
          hasLeftIcon: boolean;
          iconLeft?: string | null;
          hasRightIcon: boolean;
          iconRight?: string | null;
          variant: 'green' | 'orange' | 'black';
          size: 'small' | 'large';
          id?: string | null;
          blockName?: string | null;
          blockType: 'buttonBlock';
        }
      | {
          richText: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
          blockName?: string | null;
          blockType: 'emphasizedParagraph';
        }
      | {
          columns?:
            | {
                layout: (
                  | {
                      title: string;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'h1Block';
                    }
                  | {
                      title: string;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'h2Block';
                    }
                  | {
                      title: string;
                      richText: {
                        root: {
                          type: string;
                          children: {
                            type: string;
                            version: number;
                            [k: string]: unknown;
                          }[];
                          direction: ('ltr' | 'rtl') | null;
                          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                          indent: number;
                          version: number;
                        };
                        [k: string]: unknown;
                      };
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'heroBlock';
                    }
                  | MediaBlock
                  | LoginBlock
                  | SignupBlock
                  | {
                      sections: {
                        subtitle: string;
                        listItem?:
                          | {
                              title: string;
                              description: string;
                              id?: string | null;
                            }[]
                          | null;
                        id?: string | null;
                      }[];
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'manifestBlock';
                    }
                  | {
                      layout: (
                        | {
                            title: string;
                            id?: string | null;
                            blockName?: string | null;
                            blockType: 'h1Block';
                          }
                        | {
                            title: string;
                            id?: string | null;
                            blockName?: string | null;
                            blockType: 'h2Block';
                          }
                        | {
                            title: string;
                            richText: {
                              root: {
                                type: string;
                                children: {
                                  type: string;
                                  version: number;
                                  [k: string]: unknown;
                                }[];
                                direction: ('ltr' | 'rtl') | null;
                                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                                indent: number;
                                version: number;
                              };
                              [k: string]: unknown;
                            };
                            id?: string | null;
                            blockName?: string | null;
                            blockType: 'heroBlock';
                          }
                        | MediaBlock
                        | LoginBlock
                        | SignupBlock
                        | {
                            sections: {
                              subtitle: string;
                              listItem?:
                                | {
                                    title: string;
                                    description: string;
                                    id?: string | null;
                                  }[]
                                | null;
                              id?: string | null;
                            }[];
                            id?: string | null;
                            blockName?: string | null;
                            blockType: 'manifestBlock';
                          }
                        | {
                            link: {
                              type?: ('reference' | 'custom') | null;
                              newTab?: boolean | null;
                              reference?:
                                | ({
                                    relationTo: 'pages';
                                    value: number | Page;
                                  } | null)
                                | ({
                                    relationTo: 'knowledgebase';
                                    value: number | Knowledgebase;
                                  } | null);
                              url?: string | null;
                              label: string;
                            };
                            hasLeftIcon: boolean;
                            iconLeft?: string | null;
                            hasRightIcon: boolean;
                            iconRight?: string | null;
                            variant: 'green' | 'orange' | 'black';
                            size: 'small' | 'large';
                            id?: string | null;
                            blockName?: string | null;
                            blockType: 'buttonBlock';
                          }
                        | {
                            richText: {
                              root: {
                                type: string;
                                children: {
                                  type: string;
                                  version: number;
                                  [k: string]: unknown;
                                }[];
                                direction: ('ltr' | 'rtl') | null;
                                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                                indent: number;
                                version: number;
                              };
                              [k: string]: unknown;
                            };
                            id?: string | null;
                            blockName?: string | null;
                            blockType: 'emphasizedParagraph';
                          }
                        | {
                            title?: string | null;
                            richText: {
                              root: {
                                type: string;
                                children: {
                                  type: string;
                                  version: number;
                                  [k: string]: unknown;
                                }[];
                                direction: ('ltr' | 'rtl') | null;
                                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                                indent: number;
                                version: number;
                              };
                              [k: string]: unknown;
                            };
                            id?: string | null;
                            blockName?: string | null;
                            blockType: 'largeRichTextBlock';
                          }
                        | {
                            title: string;
                            events?: (number | null) | Event;
                            id?: string | null;
                            blockName?: string | null;
                            blockType: 'upcomingEvents';
                          }
                        | AccountBlock
                      )[];
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'indentedContainer';
                    }
                  | {
                      link: {
                        type?: ('reference' | 'custom') | null;
                        newTab?: boolean | null;
                        reference?:
                          | ({
                              relationTo: 'pages';
                              value: number | Page;
                            } | null)
                          | ({
                              relationTo: 'knowledgebase';
                              value: number | Knowledgebase;
                            } | null);
                        url?: string | null;
                        label: string;
                      };
                      hasLeftIcon: boolean;
                      iconLeft?: string | null;
                      hasRightIcon: boolean;
                      iconRight?: string | null;
                      variant: 'green' | 'orange' | 'black';
                      size: 'small' | 'large';
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'buttonBlock';
                    }
                  | {
                      richText: {
                        root: {
                          type: string;
                          children: {
                            type: string;
                            version: number;
                            [k: string]: unknown;
                          }[];
                          direction: ('ltr' | 'rtl') | null;
                          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                          indent: number;
                          version: number;
                        };
                        [k: string]: unknown;
                      };
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'emphasizedParagraph';
                    }
                  | {
                      title?: string | null;
                      richText: {
                        root: {
                          type: string;
                          children: {
                            type: string;
                            version: number;
                            [k: string]: unknown;
                          }[];
                          direction: ('ltr' | 'rtl') | null;
                          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                          indent: number;
                          version: number;
                        };
                        [k: string]: unknown;
                      };
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'largeRichTextBlock';
                    }
                  | {
                      title: string;
                      events?: (number | null) | Event;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'upcomingEvents';
                    }
                  | AccountBlock
                )[];
                id?: string | null;
              }[]
            | null;
          id?: string | null;
          blockName?: string | null;
          blockType: 'columnContainerBlock';
        }
      | {
          title?: string | null;
          richText: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          };
          id?: string | null;
          blockName?: string | null;
          blockType: 'largeRichTextBlock';
        }
      | {
          title: string;
          events?: (number | null) | Event;
          id?: string | null;
          blockName?: string | null;
          blockType: 'upcomingEvents';
        }
      | AccountBlock
    )[];
    id?: string | null;
    blockName?: string | null;
    blockType: 'containerBlock';
  }[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LoginBlock".
 */
export interface LoginBlock {
  id?: string | null;
  blockName?: string | null;
  blockType: 'loginBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "signupBlock".
 */
export interface SignupBlock {
  id?: string | null;
  blockName?: string | null;
  blockType: 'signupBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "knowledgebase".
 */
export interface Knowledgebase {
  id: number;
  slug?: string | null;
  slugLock?: boolean | null;
  restricted?: ('public' | 'members') | null;
  authors?: (number | User)[] | null;
  docOrder?: number | null;
  publishedAt?: string | null;
  badge?: (number | null) | Badge;
  title: string;
  group?: (number | null) | Group;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slugWithGroup?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  role?: ('admin' | 'team' | 'crew') | null;
  profileImage?: (number | null) | Media;
  notificationSettings?: {
    docs?: (number | NotificationSetting)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  _verified?: boolean | null;
  _verificationToken?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notification-settings".
 */
export interface NotificationSetting {
  id: number;
  user: number | User;
  type?: ('newsletter' | 'event') | null;
  nonce?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "badge".
 */
export interface Badge {
  id: number;
  text?: string | null;
  variant: 'default' | 'note' | 'danger' | 'success' | 'caution' | 'tip';
  size: 'small' | 'medium' | 'Large';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "groups".
 */
export interface Group {
  id: number;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  docOrder?: number | null;
  badgeText?: string | null;
  badgeVariant: 'default' | 'note' | 'danger' | 'success' | 'caution' | 'tip';
  parent?: (number | null) | Group;
  breadcrumbs?:
    | {
        doc?: (number | null) | Group;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: number;
  title: string;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  date: string;
  time?: string | null;
  left?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  right?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  image?: (number | null) | Media;
  attendees?: (number | User)[] | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AccountBlock".
 */
export interface AccountBlock {
  id?: string | null;
  blockName?: string | null;
  blockType: 'accountBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter".
 */
export interface Newsletter {
  id: number;
  subject: string;
  body: (
    | {
        title: string;
        id?: string | null;
        blockName?: string | null;
        blockType: 'h1Block';
      }
    | {
        title: string;
        id?: string | null;
        blockName?: string | null;
        blockType: 'h2Block';
      }
    | {
        richText: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'plainRichTextBlock';
      }
  )[];
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'knowledgebase';
        value: number | Knowledgebase;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'groups';
        value: number | Group;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'badge';
        value: number | Badge;
      } | null)
    | ({
        relationTo: 'events';
        value: number | Event;
      } | null)
    | ({
        relationTo: 'notification-settings';
        value: number | NotificationSetting;
      } | null)
    | ({
        relationTo: 'newsletter';
        value: number | Newsletter;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  layout?:
    | T
    | {
        containerBlock?:
          | T
          | {
              color?: T;
              layout?:
                | T
                | {
                    h1Block?:
                      | T
                      | {
                          title?: T;
                          id?: T;
                          blockName?: T;
                        };
                    h2Block?:
                      | T
                      | {
                          title?: T;
                          id?: T;
                          blockName?: T;
                        };
                    heroBlock?:
                      | T
                      | {
                          title?: T;
                          richText?: T;
                          id?: T;
                          blockName?: T;
                        };
                    mediaBlock?: T | MediaBlockSelect<T>;
                    loginBlock?: T | LoginBlockSelect<T>;
                    signupBlock?: T | SignupBlockSelect<T>;
                    manifestBlock?:
                      | T
                      | {
                          sections?:
                            | T
                            | {
                                subtitle?: T;
                                listItem?:
                                  | T
                                  | {
                                      title?: T;
                                      description?: T;
                                      id?: T;
                                    };
                                id?: T;
                              };
                          id?: T;
                          blockName?: T;
                        };
                    indentedContainer?:
                      | T
                      | {
                          layout?:
                            | T
                            | {
                                h1Block?:
                                  | T
                                  | {
                                      title?: T;
                                      id?: T;
                                      blockName?: T;
                                    };
                                h2Block?:
                                  | T
                                  | {
                                      title?: T;
                                      id?: T;
                                      blockName?: T;
                                    };
                                heroBlock?:
                                  | T
                                  | {
                                      title?: T;
                                      richText?: T;
                                      id?: T;
                                      blockName?: T;
                                    };
                                mediaBlock?: T | MediaBlockSelect<T>;
                                loginBlock?: T | LoginBlockSelect<T>;
                                signupBlock?: T | SignupBlockSelect<T>;
                                manifestBlock?:
                                  | T
                                  | {
                                      sections?:
                                        | T
                                        | {
                                            subtitle?: T;
                                            listItem?:
                                              | T
                                              | {
                                                  title?: T;
                                                  description?: T;
                                                  id?: T;
                                                };
                                            id?: T;
                                          };
                                      id?: T;
                                      blockName?: T;
                                    };
                                buttonBlock?:
                                  | T
                                  | {
                                      link?:
                                        | T
                                        | {
                                            type?: T;
                                            newTab?: T;
                                            reference?: T;
                                            url?: T;
                                            label?: T;
                                          };
                                      hasLeftIcon?: T;
                                      iconLeft?: T;
                                      hasRightIcon?: T;
                                      iconRight?: T;
                                      variant?: T;
                                      size?: T;
                                      id?: T;
                                      blockName?: T;
                                    };
                                emphasizedParagraph?:
                                  | T
                                  | {
                                      richText?: T;
                                      id?: T;
                                      blockName?: T;
                                    };
                                largeRichTextBlock?:
                                  | T
                                  | {
                                      title?: T;
                                      richText?: T;
                                      id?: T;
                                      blockName?: T;
                                    };
                                upcomingEvents?:
                                  | T
                                  | {
                                      title?: T;
                                      events?: T;
                                      id?: T;
                                      blockName?: T;
                                    };
                                accountBlock?: T | AccountBlockSelect<T>;
                              };
                          id?: T;
                          blockName?: T;
                        };
                    buttonBlock?:
                      | T
                      | {
                          link?:
                            | T
                            | {
                                type?: T;
                                newTab?: T;
                                reference?: T;
                                url?: T;
                                label?: T;
                              };
                          hasLeftIcon?: T;
                          iconLeft?: T;
                          hasRightIcon?: T;
                          iconRight?: T;
                          variant?: T;
                          size?: T;
                          id?: T;
                          blockName?: T;
                        };
                    emphasizedParagraph?:
                      | T
                      | {
                          richText?: T;
                          id?: T;
                          blockName?: T;
                        };
                    columnContainerBlock?:
                      | T
                      | {
                          columns?:
                            | T
                            | {
                                layout?:
                                  | T
                                  | {
                                      h1Block?:
                                        | T
                                        | {
                                            title?: T;
                                            id?: T;
                                            blockName?: T;
                                          };
                                      h2Block?:
                                        | T
                                        | {
                                            title?: T;
                                            id?: T;
                                            blockName?: T;
                                          };
                                      heroBlock?:
                                        | T
                                        | {
                                            title?: T;
                                            richText?: T;
                                            id?: T;
                                            blockName?: T;
                                          };
                                      mediaBlock?: T | MediaBlockSelect<T>;
                                      loginBlock?: T | LoginBlockSelect<T>;
                                      signupBlock?: T | SignupBlockSelect<T>;
                                      manifestBlock?:
                                        | T
                                        | {
                                            sections?:
                                              | T
                                              | {
                                                  subtitle?: T;
                                                  listItem?:
                                                    | T
                                                    | {
                                                        title?: T;
                                                        description?: T;
                                                        id?: T;
                                                      };
                                                  id?: T;
                                                };
                                            id?: T;
                                            blockName?: T;
                                          };
                                      indentedContainer?:
                                        | T
                                        | {
                                            layout?:
                                              | T
                                              | {
                                                  h1Block?:
                                                    | T
                                                    | {
                                                        title?: T;
                                                        id?: T;
                                                        blockName?: T;
                                                      };
                                                  h2Block?:
                                                    | T
                                                    | {
                                                        title?: T;
                                                        id?: T;
                                                        blockName?: T;
                                                      };
                                                  heroBlock?:
                                                    | T
                                                    | {
                                                        title?: T;
                                                        richText?: T;
                                                        id?: T;
                                                        blockName?: T;
                                                      };
                                                  mediaBlock?: T | MediaBlockSelect<T>;
                                                  loginBlock?: T | LoginBlockSelect<T>;
                                                  signupBlock?: T | SignupBlockSelect<T>;
                                                  manifestBlock?:
                                                    | T
                                                    | {
                                                        sections?:
                                                          | T
                                                          | {
                                                              subtitle?: T;
                                                              listItem?:
                                                                | T
                                                                | {
                                                                    title?: T;
                                                                    description?: T;
                                                                    id?: T;
                                                                  };
                                                              id?: T;
                                                            };
                                                        id?: T;
                                                        blockName?: T;
                                                      };
                                                  buttonBlock?:
                                                    | T
                                                    | {
                                                        link?:
                                                          | T
                                                          | {
                                                              type?: T;
                                                              newTab?: T;
                                                              reference?: T;
                                                              url?: T;
                                                              label?: T;
                                                            };
                                                        hasLeftIcon?: T;
                                                        iconLeft?: T;
                                                        hasRightIcon?: T;
                                                        iconRight?: T;
                                                        variant?: T;
                                                        size?: T;
                                                        id?: T;
                                                        blockName?: T;
                                                      };
                                                  emphasizedParagraph?:
                                                    | T
                                                    | {
                                                        richText?: T;
                                                        id?: T;
                                                        blockName?: T;
                                                      };
                                                  largeRichTextBlock?:
                                                    | T
                                                    | {
                                                        title?: T;
                                                        richText?: T;
                                                        id?: T;
                                                        blockName?: T;
                                                      };
                                                  upcomingEvents?:
                                                    | T
                                                    | {
                                                        title?: T;
                                                        events?: T;
                                                        id?: T;
                                                        blockName?: T;
                                                      };
                                                  accountBlock?: T | AccountBlockSelect<T>;
                                                };
                                            id?: T;
                                            blockName?: T;
                                          };
                                      buttonBlock?:
                                        | T
                                        | {
                                            link?:
                                              | T
                                              | {
                                                  type?: T;
                                                  newTab?: T;
                                                  reference?: T;
                                                  url?: T;
                                                  label?: T;
                                                };
                                            hasLeftIcon?: T;
                                            iconLeft?: T;
                                            hasRightIcon?: T;
                                            iconRight?: T;
                                            variant?: T;
                                            size?: T;
                                            id?: T;
                                            blockName?: T;
                                          };
                                      emphasizedParagraph?:
                                        | T
                                        | {
                                            richText?: T;
                                            id?: T;
                                            blockName?: T;
                                          };
                                      largeRichTextBlock?:
                                        | T
                                        | {
                                            title?: T;
                                            richText?: T;
                                            id?: T;
                                            blockName?: T;
                                          };
                                      upcomingEvents?:
                                        | T
                                        | {
                                            title?: T;
                                            events?: T;
                                            id?: T;
                                            blockName?: T;
                                          };
                                      accountBlock?: T | AccountBlockSelect<T>;
                                    };
                                id?: T;
                              };
                          id?: T;
                          blockName?: T;
                        };
                    largeRichTextBlock?:
                      | T
                      | {
                          title?: T;
                          richText?: T;
                          id?: T;
                          blockName?: T;
                        };
                    upcomingEvents?:
                      | T
                      | {
                          title?: T;
                          events?: T;
                          id?: T;
                          blockName?: T;
                        };
                    accountBlock?: T | AccountBlockSelect<T>;
                  };
              id?: T;
              blockName?: T;
            };
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LoginBlock_select".
 */
export interface LoginBlockSelect<T extends boolean = true> {
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "signupBlock_select".
 */
export interface SignupBlockSelect<T extends boolean = true> {
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AccountBlock_select".
 */
export interface AccountBlockSelect<T extends boolean = true> {
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "knowledgebase_select".
 */
export interface KnowledgebaseSelect<T extends boolean = true> {
  slug?: T;
  slugLock?: T;
  restricted?: T;
  authors?: T;
  docOrder?: T;
  publishedAt?: T;
  badge?: T;
  title?: T;
  group?: T;
  content?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slugWithGroup?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "groups_select".
 */
export interface GroupsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  docOrder?: T;
  badgeText?: T;
  badgeVariant?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  profileImage?: T;
  notificationSettings?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  _verified?: T;
  _verificationToken?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "badge_select".
 */
export interface BadgeSelect<T extends boolean = true> {
  text?: T;
  variant?: T;
  size?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  date?: T;
  time?: T;
  left?: T;
  right?: T;
  image?: T;
  attendees?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notification-settings_select".
 */
export interface NotificationSettingsSelect<T extends boolean = true> {
  user?: T;
  type?: T;
  nonce?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter_select".
 */
export interface NewsletterSelect<T extends boolean = true> {
  subject?: T;
  body?:
    | T
    | {
        h1Block?:
          | T
          | {
              title?: T;
              id?: T;
              blockName?: T;
            };
        h2Block?:
          | T
          | {
              title?: T;
              id?: T;
              blockName?: T;
            };
        plainRichTextBlock?:
          | T
          | {
              richText?: T;
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'knowledgebase';
                value: number | Knowledgebase;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'knowledgebase';
                value: number | Knowledgebase;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LinkCardBlock".
 */
export interface LinkCardBlock {
  title: string;
  href: string;
  description?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'linkCardBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}
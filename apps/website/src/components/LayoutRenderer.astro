---
import { Icon } from "astro-icon/components"
import type { LayoutUnion } from "../content/loaders/payload/pages/schema"
import Button from "./button/Button.astro"
import { button } from "./button/button"
import LexicalRenderer from "./LexicalRenderer.astro"
import ManifestBlock from "./ManifestBlock.astro"
import { cn } from "../lib/cn"
import Login from "./Login.tsx"
import SignUp from "./SignUp/SignUp.astro"
import UpcomingEvents from "./UpcomingEvents/UpcomingEvents.astro"
import Account from "./Account/Account.astro"
import HeroHome from "./HeroHome.astro"
import HighlightArticle from "./highlight-article.astro"
import SelectedWork from "./selected-work.astro"
import Divider from "./divider.astro"
import JoinCrew from "./join-crew.astro"

export interface Props {
	children: LayoutUnion[]
	slug: string
}

const { children, slug } = Astro.props


---

{
	children.map((block) => {
	if ("blockType" in block) {
			return <>
			{
			() => {
			switch (block.blockType) {
				case "h1Block":
					return (
						<h1 class={"typestyle-h1 text-off-white"}>
							{block.title}
						</h1>
					)
				case "heroBlock":
					return <HeroHome title={block.title} />
				case "highlightArticleBlock":
					return (
						<HighlightArticle {...block} />
					)
				case "selectedWorkBlock":
					return (
						<SelectedWork {...block} />
					)
				case "joinCrewBlock":
					return (
						<JoinCrew {...block} />
					)
				case "h2Block":
					return (
						<h2 class="typestyle-h2 group-data-[color=green]:text-off-white group-data-[color=white]:text-green-lightest">
							{block.title}
						</h2>
					)
				case "emphasizedParagraph":
					return (
						<div class="typestyle-hero-p group-data-[color=green]:text-off-white group-data-[color=white]:text-green-black">
							<LexicalRenderer
								children={block.richText.root.children}
							/>
						</div>
					)
				case "indentedContainer":
					return (
						<div class="flex flex-col items-start gap-10 lg:ml-[25%]">
							<Astro.self children={block.layout} slug={slug} />
						</div>
					)
				case "buttonBlock":
					let url
					if (block.link.type === "reference") {
						if (block.link.reference.relationTo === "pages") {
							url =
								block.link.reference.value.slug === "home"
									? "/"
									: block.link.reference.value.slug
						} else if (
							block.link.reference.relationTo === "knowledgebase"
						) {
							url = block.link.reference.value.slugWithGroup
						}
					} else {
						url = block.link.url
					}
					return (
						<a
							class={button({
								size: block.size,
								intent: block.variant,
							})}
							href={url}>
							{block.hasLeftIcon && (
								<Icon name={`ph:${block.iconLeft}`} />
							)}
							{block.link.label}
							{block.hasRightIcon && (
								<Icon name={`ph:${block.iconRight}`} />
							)}
						</a>
					)
				case "columnContainerBlock":
					return (
						<div class="flex flex-col items-start gap-8 lg:flex-row">
							{block.columns.map((column) => {
								return (
									<div class="lg:base-1/2 flex w-full flex-col items-start justify-center gap-8">
										<Astro.self
											children={column.layout}
											slug={slug}
										/>
									</div>
								)
							})}
						</div>
					)
				case "largeRichTextBlock":
					return (
						<div class="typestyle-text-l group-data-[color=green]:text-off-white group-data-[color=white]:text-green-black flex flex-col items-start gap-4">
							<h4 class="typestyle-h4">{block.title}</h4>
							<LexicalRenderer
								children={block.richText.root.children}
							/>
						</div>
					)
				case "manifestBlock":
					return <ManifestBlock sections={block.sections} />
				case "loginBlock":
					return <Login client:load />
				case "signupBlock":
					return <SignUp />
				case "upcomingEvents":
					return <UpcomingEvents {...block} server:defer />
				case "accountBlock":
					return <Account server:defer />
				default:
					return (
						<p class="text-white mix-blend-difference">
							{JSON.stringify(block)}
						</p>
					)
			}
			}
			}
			<Divider />
			</J>
		}
	})
}

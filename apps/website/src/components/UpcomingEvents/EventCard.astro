---
import type { Event } from "../../content/loaders/payload/pages/getEvents"
import LexicalRenderer from "../LexicalRenderer.astro"
import { EventMoreInfo } from "./EventMoreInfo"
import { Participate } from "./Participate"
import { generateIcsCalendar, type VEvent, type VCalendar } from "ts-ics";
export interface Props extends Event {}

const props = Astro.props

const date = new Date(props.date).toLocaleDateString("de-DE", {
	month: "numeric",
	day: "numeric",
	year: "numeric",
})

const startDate = new Date(props.date);
const endDate = new Date(props.date);
endDate.setHours(endDate.getHours() + 2); // Default 2-hour duration

const event: VEvent = {
	start: {
		date: startDate,
		type: "DATE-TIME",
	},
	end: {
		date: endDate,
		type: "DATE-TIME",
	},
	stamp: {
		date: new Date(),
		type: "DATE-TIME",
	},
	uid: props.id.toString(),
	summary: props.title,
};

const calendar: VCalendar = {
	prodId: "-//Collective Change//DE",
	version: "2.0",
	events: [event],
};

// Generate event content
const eventContent = generateIcsCalendar(calendar);

// Create a complete valid iCalendar file by wrapping the event in VCALENDAR
---

<div
	class="relative flex flex-col gap-4 overflow-clip rounded-xl bg-white pt-5 text-green-black"
>
	<div class="flex w-full flex-col gap-4 px-5">
		<div class="flex w-full flex-col">
			<h3 class="typestyle-text-m">{date}</h3>
			<a href={`data:text/calendar;charset=utf-8,${encodeURIComponent(eventContent)}`}
			download={`${props.title}.ics`}>
				<button class="typestyle-text-m">Kalendereintrag herunterladen</button>
			</a>
			<h3 class="typestyle-h6">{props.title}</h3>
		</div>
		<div class="line-clamp-2 typestyle-text-m">
			{
				props.description ? (
				<LexicalRenderer {...props.description.root} />
				) : (
					<p>FÃ¼r dieses Event gibt es keinen Beschribungstext</p>
				)
			}
		</div>
		<Participate {...props} client:load />
	</div>
	<EventMoreInfo {...props} client:load>
		<div class="flex flex-col gap-6">
			{
				props.description && (
					<div class="lexicalContainer">
						<LexicalRenderer {...props.description.root} />
					</div>
					<hr class="h-[1px] bg-off-white" />
				)
			}
			<div class="flex">
				<div class="basis-1/2 lexicalContainer">
					<LexicalRenderer {...props.left.root} />
				</div>
				<div class="basis-1/2 lexicalContainer">
					<LexicalRenderer {...props.right.root} />
				</div>
			</div>
		</div>
	</EventMoreInfo>
</div>

<style is:global>
	.lexicalContainer {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
		line-height: 1.5;
		
		& em {
			font-variation-settings: 'ital' 11;
		}
		& strong {
			font-variation-settings: 'wght' 700;
		}
	}
</style>
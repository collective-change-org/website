---
import type { Event } from "../../content/loaders/payload/pages/getEvents"
import LexicalRenderer from "../LexicalRenderer.astro"
import { EventMoreInfo } from "./EventMoreInfo"
import { Participate } from "./Participate"
import { generateIcsCalendar, type VEvent, type VCalendar } from "ts-ics"
export interface Props extends Event {}

const props = Astro.props

const date = new Date(props.beginDate)

const dateString = date.toLocaleDateString("de-DE", {
	month: "numeric",
	day: "numeric",
	year: "numeric",
	hour: "numeric",
	minute: "numeric",
	timeZone: "Europe/Berlin",
})

const startDate = date
const endDate = new Date(props.endDate)

function lexicalToText(
	children: Event["description"]["root"]["children"],
): string {
	const text = children.map((node) => {
		switch (node.type) {
			case "paragraph":
				return lexicalToText(node.children) + "\r\n \r\n "
			case "text":
				return node.text + "\r\n "
			case "heading":
				return lexicalToText(node.children) + "\r\n "
			default:
				break
		}
	})
	return text.join("")
}

const event: VEvent = {
	start: {
		date: startDate,
		type: "DATE-TIME",
	},
	end: {
		date: endDate,
		type: "DATE-TIME",
	},
	stamp: {
		date: new Date(),
		type: "DATE-TIME",
	},
	uid: props.id.toString(),
	summary: `${props.title}—Collective Change`,
	description: lexicalToText(props.description.root.children),
}

const calendar: VCalendar = {
	prodId: "-//Collective Change//DE",
	version: "2.0",
	events: [event],
}

// Generate event content
const eventContent = generateIcsCalendar(calendar)

// Create a complete valid iCalendar file by wrapping the event in VCALENDAR
---

<div
	class="relative flex h-fit w-[80%] flex-col gap-[20px] overflow-clip rounded-xl bg-white pt-5 text-green-black lg:w-[45%]"
>
	<div class="flex w-full flex-col gap-4 px-5">
		<div class="flex w-full flex-col gap-[2px]">
			<div class="flex flex-wrap items-center gap-2">
				<h3 class="typestyle-text-m">{dateString}</h3>
				<a
					href={`data:text/calendar;charset=utf-8,${encodeURIComponent(eventContent)}`}
					download={`${props.title}.ics`}
					class="typestyle-text-s tracking-wider text-black"
				>
					Zum Kalender hinzufügen
				</a>
			</div>
			<h3 class="typestyle-h5">{props.title}</h3>
			<div class="typestyle-text-m line-clamp-2">
				{
					props.description ? (
						<LexicalRenderer {...props.description.root} />
					) : (
						<p>Für dieses Event gibt es keinen Beschribungstext</p>
					)
				}
			</div>
			<Participate {...props} client:load />
		</div>
		<EventMoreInfo {...props} client:load>
			<div class="flex flex-col gap-6">
				{
					props.description && (
						<>
							<div class="lexicalContainer">
								<LexicalRenderer {...props.description.root} />
							</div>
							<hr class="h-[1px] bg-off-white" />
						</>
					)
				}
				<div class="flex">
					<div class="lexicalContainer flex basis-1/2 flex-col gap-3">
						<LexicalRenderer {...props.left.root} />
					</div>
					<div class="lexicalContainer flex basis-1/2 flex-col gap-3">
						<LexicalRenderer {...props.right.root} />
					</div>
				</div>
			</div>
		</EventMoreInfo>
	</div>

	<style is:global>
		.lexicalContainer {
			display: flex;
			flex-direction: column;
			gap: 0.5rem;
			line-height: 1.5;

			& em {
				font-variation-settings: "ital" 11;
			}
			& strong {
				font-variation-settings: "wght" 700;
			}
		}
	</style>
</div>

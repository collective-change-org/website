---
import { Badge, Icon } from "@astrojs/starlight/components"
import SidebarRestorePoint from "./SidebarRestorePoint.astro"
import type { SidebarEntry } from "@website/src/content/loaders/payload/getSidebar"
import type {
	LinkHTMLAttributes,
	SidebarLinkItem,
} from "@website/src/schemas/sidebar"

/** Turn the nested tree structure of a sidebar into a flat list of all the links. */
export function flattenSidebar(sidebar: SidebarEntry[]): SidebarLinkItem[] {
	return sidebar.flatMap((entry) => {
		return entry.type === "group" ? flattenSidebar(entry.entries) : entry
	})
}

interface Props {
	sublist: SidebarEntry[]
	nested?: boolean
}

const { sublist, nested } = Astro.props
---

<ul class:list={{ "top-level": !nested }}>
	{
		sublist.map((entry) => (
			<li>
				{entry.type === "link" ? (
					<a
						href={entry.href}
						aria-current={entry.isCurrent && "page"}
						class:list={[{ large: !nested }, entry.attrs.class,"hover:bg-pink-dark hover:text-off-white"]}
						{...entry.attrs}>
						<span class="typestyle-text-s">{entry.label}</span>
						{entry.badge && (
							<Badge
								variant={entry.badge.variant}
								class={entry.badge.class}
								text={entry.badge.text}
							/>
						)}
					</a>
				) : (
					<details
						open={
							flattenSidebar(entry.entries).some(
								(i) => i.isCurrent,
							) || !entry.collapsed
						}>
						<SidebarRestorePoint />
						<summary>
							<div class="group-label py-2">
								<span class="typestyle-text-m !font-bold">
									{entry.label}
								</span>
								{entry.badge && (
									<Badge
										variant={entry.badge.variant}
										class={entry.badge.class}
										text={entry.badge.text}
									/>
								)}
							</div>
							<Icon
								name="right-caret"
								class="caret"
								size="1.5rem"
							/>
						</summary>
						<Astro.self sublist={entry.entries} nested />
					</details>
				)}
			</li>
		))
	}
</ul>

<style>
	ul {
		--sl-sidebar-item-padding-inline: 0.5rem;
		list-style: none;
		padding: 0;
	}

	li {
		overflow-wrap: anywhere;
	}

	ul ul li {
		margin-inline-start: var(--sl-sidebar-item-padding-inline);
		border-inline-start: 1px solid;
		@apply border-green-lighter;
		padding-inline-start: var(--sl-sidebar-item-padding-inline);
	}

	.large {
		font-size: var(--sl-text-lg);
		font-weight: 600;
		@apply text-green-black;
	}

	.top-level > li + li {
		margin-top: 0.75rem;
	}

	summary {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: 0.2em var(--sl-sidebar-item-padding-inline);
		line-height: 1.4;
		cursor: pointer;
		user-select: none;
	}
	summary::marker,
	summary::-webkit-details-marker {
		display: none;
	}

	.caret {
		transition: transform 0.2s ease-in-out;
		flex-shrink: 0;
	}
	:global([dir="rtl"]) .caret {
		transform: rotateZ(180deg);
	}
	[open] > summary .caret {
		transform: rotateZ(90deg);
	}

	a {
		display: block;
		border-radius: 0.25rem;
		text-decoration: none;
		@apply text-green-black;
		padding: 0.3em var(--sl-sidebar-item-padding-inline);
		line-height: 1.4;
	}

	a:hover,
	a:focus {
		@apply text-black;
	}

	[aria-current="page"],
	[aria-current="page"]:hover,
	[aria-current="page"]:focus {
		@apply bg-pink-light text-green-black;
	}

	a > *:not(:last-child),
	.group-label > *:not(:last-child) {
		margin-inline-end: 0.25em;
	}

	@media (min-width: 50rem) {
		.top-level > li + li {
			margin-top: 0.5rem;
		}
		.large {
			font-size: var(--sl-text-base);
		}
		a {
			font-size: var(--sl-text-sm);
		}
	}
</style>

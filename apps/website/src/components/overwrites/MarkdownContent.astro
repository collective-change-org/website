---
import LexicalRenderer from "../LexicalRenderer.astro"
import type { LexicalRoot } from "../../content/loaders/payload/schemas/lexical"
import RestrictedRenderer from "../RestrictedRenderer.astro"
import type { LayoutUnion } from "../../content/loaders/payload/pages/schema"
import LayoutRenderer from "../LayoutRenderer.astro"
import { cn } from "../../lib/cn"

const { entry } = Astro.locals.starlightRoute
const { slug } = entry
const page = entry.data

let content
if (page.template === "splash") {
	content = page.layout as LayoutUnion[]
} else if (page.template === "doc") {
	content = page.lexical as LexicalRoot
}
---

<div class="min-h-screen">
	<div
		class={cn(
			"default-layout font-sans",
			page.template === "doc" && "text-black",
		)}
	>
		{
			page.title === "404" ? (
				<div class="flex h-screen items-center justify-center">
					<h1 class="text-4xl">404</h1>
				</div>
			) : (
				() => {
					switch (page.template) {
						case "splash":
							return (
								<LayoutRenderer
									slug={entry.id}
									children={page.layout}
								/>
							)
						case "doc":
							return page.visibility !== "public" ? (
								<RestrictedRenderer
									server:defer
									visibility={page.visibility}
									redirect={encodeURIComponent(
										Astro.url.pathname,
									)}>
									<h1 class="typestyle-h4 text-green-black pt-8 pb-4 lg:pt-4">
										{
											Astro.locals.starlightRoute.entry
												.data.title
										}
									</h1>
									<LexicalRenderer
										children={page.lexical.children}
									/>
								</RestrictedRenderer>
							) : (
								<>
									<h1 class="typestyle-h4 text-green-black pt-8 pb-4 lg:pt-4">
										{
											Astro.locals.starlightRoute.entry
												.data.title
										}
									</h1>
									<LexicalRenderer
										children={page.lexical.children}
									/>
								</>
							)

						default:
							return <p>No content</p>
					}
				}
			)
		}
	</div>
</div>
